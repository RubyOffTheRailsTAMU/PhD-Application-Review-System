
<div class="container" style="margin-top: 100px;">
    <!-- Rule Selection -->
    <div class="mb-3">
    <input type="checkbox" id="roundRobin" name="roundRobin">
    <label for="roundRobin">Round Robin Approach</label><br>
    <input type="checkbox" id="minThree" name="minThree">
    <label for="minThree">3 Users per Application</label><br>
    </div>

    <!-- Assign Button -->
    <div class="assign-button">
        <button id="assignButton" onclick="assignReviewers()" class="btn btn-primary">Assign</button>
        <button id="destroyAllButton" class="btn btn-danger">Delete All</button>
    </div>
    <!-- Alert for Assignment Status -->
    <div id="assignmentAlertFail" class="fail-message" style="display: none;">
        Assignment of applications failed!
    </div>
    <div id="assignmentAlert" class="success-message" style="display: none;">
        Assignment of applications succeeded!
    </div>
    <h2 class="mt-4">Committee Members</h2>
    <hr> <!-- Division line -->
    <!-- User Cards Container -->
    <div class="row mt-4">
        <% @committee_members.each_slice(2) do |pair| %>
            <div class="row">
            <% pair.each do |member| %>
                <div class="col-md-6">
                <div class="dashboard card" style="margin-bottom: 10px">
                    <div class="card-body">
                    <h5 class="card-title"><%= member.user_name %></h5>
                    <hr> <!-- Division line -->
                   <table class="table">
                        <!-- Table Header -->
                        <thead>
                            <tr>
                            <th scope="col">Name</th>
                            <th scope="col">CAS ID</th>
                            <th scope="col">Actions</th>
                            </tr>
                        </thead>
                    </table>
                        <div style="overflow-y:auto; max-height: 300px;">
                            <table class="table">
                                    <tbody id="applicationList=<%= member.user_netid %>">
                                        <% @committee_reviews[member.user_netid].each do |review| %>
                                        <tr id="review-row-<%= review.applicant_id %>" class="clickable-row" data-href="/applicant?cas_id=<%= review.applicant_id.to_f %>">
                                            <td><%= @applicant_names[review.applicant_id] %></td>
                                            <td><%= review.applicant_id %></td>
                                            <td><button type="button" class="btn btn-primary btn-sm">remove</button></td>
                                        </tr>
                                        <% end %>
                                    </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                </div>
            <% end %>
            </div>
        <% end %>
    </div>
</div>


  <script>
    document.addEventListener('DOMContentLoaded', function() {
        var destroyAllButton = document.getElementById('destroyAllButton');

        destroyAllButton.addEventListener('click', function() {
            if (confirm('Are you sure you want to delete all records? This action cannot be undone.')) {
                fetch('/reviews', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        // Add CSRF Token for Rails (replace with your CSRF token method if needed)
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                })
                .then(response => {
                    if (response.ok) {
                             document.querySelectorAll('tbody[id^="applicationList="]').forEach(tableBody => {
                                tableBody.innerHTML = '';
                            });
                                                return response.json();
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(() => {
                    alert('All records have been successfully deleted.');
                    // You might want to update the UI here to reflect the deletion
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while trying to delete all records.');
                });
            }
        });
    });


    function assignReviewers(){
        var checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        var checkboxesChecked = [];
        for (var i = 0; i < checkboxes.length; i++) {
            // Push the checked checkboxes onto an array
            checkboxesChecked.push(checkboxes[i].id);
        }
        console.log(checkboxesChecked);

        url =   "<%= @phd_app_url%>" + "/randomassign";
        fetch(url, {
        method: 'POST', // Specify the method as POST
        headers: {
            'Content-Type': 'application/json', // Set the content type header so that the server knows the format of the sent data
        },
        body: JSON.stringify({"option": checkboxesChecked}) // Convert the JavaScript object to a JSON string and send it as the request body
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json(); // Parse the JSON response
        })
        .then(data => {
            console.log('Success:', data); // Handle the response data
            // location.reload();
            document.getElementById('assignmentAlert').style.display = 'block';
            setTimeout(function() {
                    document.getElementById('assignmentAlert').style.display = 'none';
            }, 3000); // The message will be hidden after 3 seconds
            location.reload();
        })
        .catch(error => {
            console.error('Error:', error); // Handle any errors
            document.getElementById('assignmentAlertFail').style.display = 'block';
            setTimeout(function() {
                    document.getElementById('assignmentAlertFail').style.display = 'none';
            }, 3000); // The message will be hidden after 3 seconds
            location.reload();
        });
        
    }
    /*Delete Review call*/
    function deleteReview(applicantId) {
        if (!confirm('Are you sure you want to delete this review?')) {
            return;
        }

        fetch(`/reviews/${applicantId}`, {
            method: 'DELETE',
            headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            }
        })
        .then(response => {
            if (response.ok) {
            document.getElementById(`review-row-${applicantId}`).remove();
            // alert('Review deleted successfully');
            showAlert('Review deleted successfully');
            } else {
            alert('Error: Review not found');
            }
        })
        .catch(error => console.error('Error:', error));
    }
    document.addEventListener('DOMContentLoaded', function() {
    var rows = document.querySelectorAll('.clickable-row');
    document.querySelectorAll('.clickable-row .btn-primary').forEach(function(button) {
        button.addEventListener('click', function(event) {
            // Prevents the row click event when the button is clicked
            event.stopPropagation();
            var button = event.target;

            // Traverse up to the row element
            var row = button.closest('tr');

            // Find the second cell (td) which contains the CAS ID
            var casId = row.cells[1].textContent;
            // Button-specific functionality goes here
            deleteReview(casId)
            console.log('Button clicked!');
        });
    });
    rows.forEach(function(row) {
      row.addEventListener('click', function() {
        window.location.href = this.dataset.href;
      });
    });
  });

  function showAlert(message) {
  // Create alert element
  var alertBox = document.createElement('div');
  alertBox.classList.add('alert-box');
  alertBox.textContent = message;

  // Add alert to the body
  document.body.appendChild(alertBox);

  // Fade in
  setTimeout(() => alertBox.style.opacity = 1, 10); // Start fade in

  // Fade out after 3 seconds
  setTimeout(() => {
    alertBox.style.animation = 'fadeOut 0.5s ease-in-out';
    alertBox.style.opacity = 0;
  }, 3000); // Start fade out

  // Remove element after animation
  setTimeout(() => alertBox.remove(), 3500);
}

  </script>